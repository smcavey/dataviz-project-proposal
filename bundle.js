(function (d3$1) {
  'use strict';

  const axes = (
    selection,
    {
      xScale,
      yScale,
      xAxisLabel,
      yAxisLabel,
      titleLabel = xAxisLabel + ' vs. ' + yAxisLabel,
      xAxisLabelOffset = 20,
      yAxisLabelOffset = 50,
      titleOffset = 25
    }
  ) => {
    selection
      .selectAll('g.y-axis')
      .data([null])
      .join('g')
      .attr(
        'transform',
        `translate(${xScale.range()[0]},0)`
      )
      .attr('class', 'y-axis')
      .call(d3$1.axisLeft(yScale));

    selection
      .selectAll('g.x-axis')
      .data([null])
      .join('g')
      .attr(
        'transform',
        `translate(0, ${yScale.range()[0]})`
      )
      .attr('class', 'x-axis')
      .call(d3$1.axisBottom(xScale));

    selection
      .selectAll('g.y-axis-label')
      .data([null])
      .join('text')
      .attr('class', 'y-axis-label')
      .attr('text-anchor', 'middle')
      .attr('transform', 'rotate(-90)')
      .attr(
        'x',
        -(yScale.range()[0] + yScale.range()[1]) / 2
      )
      .attr(
        'y',
        xScale.range()[0] - yAxisLabelOffset
      )
      .text(yAxisLabel);

    selection
      .selectAll('g.x-axis-label')
      .data([null])
      .join('text')
      .attr('class', 'x-axis-label')
      .attr(
        'x',
        (xScale.range()[0] + xScale.range()[1]) / 2
      )
      .attr(
        'y',
        yScale.range()[0] + xAxisLabelOffset
      )
      .attr('text-anchor', 'middle')
      .attr('alignment-baseline', 'hanging')
      .text(xAxisLabel);
    // console.log('xScale', xScale.range());
    // console.log('yScale', yScale.range());
    selection
    	.selectAll('g.title')
      .data([null])
    	.join('text')
    	.attr('text-anchor', 'middle')
      .attr(
        'x',
        (xScale.range()[0] + xScale.range()[1]) / 2
      )
      .attr(
        'y',
        yScale.range()[1] - titleOffset
      )
    	.text(titleLabel);
  };

  const colorLegend = (
    selection,
    {
      colorScale,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
      tickSpacing = 25,
      tickPadding = 12,
      colorLegendLabelX = -10,
      colorLegendLabelY = -24,
    }
  ) => {
    const colorLegendG = selection
      .selectAll('g.color-legend')
      .data([null])
      .join('g')
      .attr('class', 'color-legend')
      .attr(
        'transform',
        `translate(${colorLegendX},${colorLegendY})`
      );

    colorLegendG
      .selectAll('text.color-legend-label')
      .data([null])
      .join('text')
      .attr('x', colorLegendLabelX)
      .attr('y', colorLegendLabelY)
      .attr('class', 'color-legend-label')
      .attr('font-family', 'sans-serif')
      .text(colorLegendLabel);

    colorLegendG
      .selectAll('g.tick')
      .data(colorScale.domain())
      .join((enter) =>
        enter
          .append('g')
          .attr('class', 'tick')
          .call((selection) => {
            selection.append('circle');
            selection.append('text');
          })
      )
      .attr(
        'transform',
        (d, i) => `translate(0, ${i * tickSpacing})`
      )
      .attr('font-size', 9)
      .attr('font-family', 'sans-serif')
      .call((selection) => {
        selection
          .select('circle')
          .attr('r', 10)
          .attr('fill', colorScale);
        selection
          .select('text')
          .attr('dy', '0.32em')
          .attr('x', tickPadding)
          .text((d) => d);
      });
  };

  const lineChart = (
    selection,
    {
      data,
      width,
      height,
      xValue,
      yValue,
      margin,
      xAxisLabel,
      yAxisLabel,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
      event,
      colorValue = (d) => {
        switch (d.UNDP_Developing_Regions) {
          case 'SSA':
            return 'Sub-Saharan Arfica';
          case 'SA':
            return 'South Asia';
          case 'AS':
            return 'Arab States';
          case 'ECA':
            return 'Europe / Central Asia';
          case 'EAP':
            return 'East Asia / Pacific';
          case 'LAC':
            return 'Latin America / Caribbean';
          default:
            return 'N/A';
        }
      },
    }
  ) => {
    const filteredData = data.filter((d) => {
      return !isNaN(xValue(d)) && !isNaN(yValue(d));
    });

    const xScale = d3$1.scaleTime()
      .domain(d3$1.extent(filteredData, xValue))
      .range([margin.left, width - margin.right]);

    const yScale = d3$1.scaleLinear()
      .domain(d3$1.extent(filteredData, yValue))
      .range([height - margin.bottom, margin.top]);

    selection.call(axes, {
      xScale,
      yScale,
      xAxisLabel,
      yAxisLabel,
    });

    const lineGenerator = d3$1.line()
      .x((d) => xScale(xValue(d)))
      .y((d) => yScale(yValue(d)));

    const colorScale = d3$1.scaleOrdinal()
      .domain([
        ...new Set(
          filteredData.map((d) => colorValue(d))
        ),
      ])
      .range(d3$1.schemeCategory10);

    selection.call(colorLegend, {
      colorScale,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
    });

    const lineValue = (d) => d.Country;

    const grouped = d3$1.flatGroup(
      filteredData,
      lineValue
    );
    //console.log(grouped);
    const tooltip = d3
      .select('body')
      .append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('pointer-events', 'none')
      .style('opacity', 0);

    selection
      .selectAll('path.line')
      .data(grouped)
      .join('path')
      .attr('class', 'line')
      .attr('d', (d) => lineGenerator(d[1]))
      .attr('stroke', (d) =>
        colorScale(colorValue(d[1][0]))
      )
      .attr('stroke-width', 2)
      .attr('fill', 'none')
      .attr('stroke-width', 0.5)

      .on('mouseover', function (event, d) {
        d3.select(this).attr('stroke-width', 3);
        selection
          .append('text')
          .attr('class', 'd3-tooltip')
          .attr('x', event.pageX + 10)
          .attr('y', event.pageY - 10)
          .text(d[0]);
      })
      .on('mouseout', function (event, d) {
        d3.select(this).attr('stroke-width', 0.5);
        selection.select('.d3-tooltip').remove();
      });
    selection
      .selectAll('.dot')
      .data(
        filteredData.filter((d) => d.Event !== '')
      )
      .join('circle')
      .attr('class', 'dot')
      .attr('cx', (d) => xScale(xValue(d)))
      .attr('cy', (d) => yScale(yValue(d)))
      .attr('r', 3)
      .attr('fill', (d) =>
        d.event !== '' ? 'black' : 'none'
      )
      .attr('display', (d) =>
        d.event !== '' ? 'block' : 'none'
      )
      .on('mouseover', function (event, d) {
        d3.select(this).attr('r', 6);
        tooltip
          .style('opacity', 1)
          .html(
            `<div>Country: ${d.Country}</div><div>Year: ${d.Date.getFullYear()}</div><div>Event: ${d.Event}</div>`
          )
          .style('left', event.pageX + 10 + 'px')
          .style('top', event.pageY - 10 + 'px');
      })
      .on('mouseout', function () {
        d3.select(this).attr('r', 3);
        tooltip.style('opacity', 0);
      });
  };

  const menu = (
    selection,
    { optionsData, onChange, value }
  ) => {
    const selectElement = selection
      .selectAll('select')
      .data([null])
      .join('select')
      .on('change', (event) => {
        onChange(event.target.value);
      });

    selectElement
      .selectAll('option')
      .data(optionsData)
      .join('option')
      .attr('value', (d) => d.value)
      .text((d) => d.label);

    selectElement.property('value', value);
  };

  const viz = (
    container,
    { state, setState }
  ) => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    const optionsData = [
      { value: 'hdi', label: 'hdi' },
      { value: 'hdi_male', label: 'male' },
      { value: 'hdi_female', label: 'female' },
    ];

    d3$1.select(container).call(menu, {
      optionsData,
      value: state.value,
      onChange: (value) => {
        setState((state) => ({
          ...state,
          value,
        }));
      },
    });

    if (!state.value) {
      setState((state) => ({
        ...state,
        value: 'hdi',
      }));
      return;
    }

    const svg = d3$1.select(container)
      .selectAll('svg')
      .data([null])
      .join('svg')
      .attr('width', width)
      .attr('height', height);

    // state.data could be:
    // * undefined
    // * 'LOADING'
    // * An array of objects
    const { data } = state;

    if (data && data !== 'LOADING') {
      let selectedDataset;
      switch (state.value) {
        case 'hdi':
          selectedDataset = state.hdi;
          break;
        case 'hdi_male':
          selectedDataset = state.hdi_male;
          break;
        case 'hdi_female':
          selectedDataset = state.hdi_female;
          break;
        default:
          selectedDataset = state.hdi;
          break;
      }
      svg.call(lineChart, {
        data: selectedDataset,
        width,
        height,
        xValue: (selectedDataset) => selectedDataset.Date,
        yValue: (selectedDataset) => selectedDataset.Value,
        margin: {
          top: 70,
          bottom: 70,
          right: 125,
          left: 65,
        },
        xAxisLabel: 'Year',
        yAxisLabel: 'HDI Value',
        colorLegendLabel: 'UNDP Region',
        colorLegendX: 845,
        colorLegendY: 70,
        event: (selectedDataset) => selectedDataset.Event
      });
    }

    if (data === undefined) {
      setState((state) => ({
        ...state,
        data: 'LOADING',
      }));
      fetch('data.csv')
        .then((response) => response.text())
        .then((csvString) => {
          const data = d3$1.csvParse(csvString);
          const parseDate = d3$1.timeParse('%Y');
          let hdi = [];
          let hdi_male = [];
          let hdi_female = [];
          for (const d of data) {
            // female subset
            if (d['Date'].includes('female')) {
              d['Date'] = parseDate(
                d['Date'].toString().slice(11)
              );
              hdi_female.push(d);
              // male subset
            } else if (d['Date'].includes('male')) {
              d['Date'] = parseDate(
                d['Date'].toString().slice(9)
              );
              hdi_male.push(d);
              // non-gendered subset
            } else {
              d['Date'] = parseDate(
                d['Date'].toString().slice(24)
              );
              hdi.push(d);
            }
          }

          setState((state) => ({
            ...state,
            data,
            hdi,
            hdi_male,
            hdi_female,
          }));
        });
    }
  };

  const container = d3$1.select('#app').node();
  let state = {};

  const render = () => {
    viz(container, {
      state,
      setState,
    });
  };

  const setState = (next) => {
    state = next(state);
    render();
  };

  render();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImF4ZXMuanMiLCJjb2xvckxlZ2VuZC5qcyIsImxpbmVDaGFydC5qcyIsIm1lbnUuanMiLCJ2aXouanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBheGlzTGVmdCwgYXhpc0JvdHRvbSB9IGZyb20gJ2QzJztcblxuZXhwb3J0IGNvbnN0IGF4ZXMgPSAoXG4gIHNlbGVjdGlvbixcbiAge1xuICAgIHhTY2FsZSxcbiAgICB5U2NhbGUsXG4gICAgeEF4aXNMYWJlbCxcbiAgICB5QXhpc0xhYmVsLFxuICAgIHRpdGxlTGFiZWwgPSB4QXhpc0xhYmVsICsgJyB2cy4gJyArIHlBeGlzTGFiZWwsXG4gICAgeEF4aXNMYWJlbE9mZnNldCA9IDIwLFxuICAgIHlBeGlzTGFiZWxPZmZzZXQgPSA1MCxcbiAgICB0aXRsZU9mZnNldCA9IDI1XG4gIH1cbikgPT4ge1xuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdnLnktYXhpcycpXG4gICAgLmRhdGEoW251bGxdKVxuICAgIC5qb2luKCdnJylcbiAgICAuYXR0cihcbiAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgYHRyYW5zbGF0ZSgke3hTY2FsZS5yYW5nZSgpWzBdfSwwKWBcbiAgICApXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3ktYXhpcycpXG4gICAgLmNhbGwoYXhpc0xlZnQoeVNjYWxlKSk7XG5cbiAgc2VsZWN0aW9uXG4gICAgLnNlbGVjdEFsbCgnZy54LWF4aXMnKVxuICAgIC5kYXRhKFtudWxsXSlcbiAgICAuam9pbignZycpXG4gICAgLmF0dHIoXG4gICAgICAndHJhbnNmb3JtJyxcbiAgICAgIGB0cmFuc2xhdGUoMCwgJHt5U2NhbGUucmFuZ2UoKVswXX0pYFxuICAgIClcbiAgICAuYXR0cignY2xhc3MnLCAneC1heGlzJylcbiAgICAuY2FsbChheGlzQm90dG9tKHhTY2FsZSkpO1xuXG4gIHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ2cueS1heGlzLWxhYmVsJylcbiAgICAuZGF0YShbbnVsbF0pXG4gICAgLmpvaW4oJ3RleHQnKVxuICAgIC5hdHRyKCdjbGFzcycsICd5LWF4aXMtbGFiZWwnKVxuICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAncm90YXRlKC05MCknKVxuICAgIC5hdHRyKFxuICAgICAgJ3gnLFxuICAgICAgLSh5U2NhbGUucmFuZ2UoKVswXSArIHlTY2FsZS5yYW5nZSgpWzFdKSAvIDJcbiAgICApXG4gICAgLmF0dHIoXG4gICAgICAneScsXG4gICAgICB4U2NhbGUucmFuZ2UoKVswXSAtIHlBeGlzTGFiZWxPZmZzZXRcbiAgICApXG4gICAgLnRleHQoeUF4aXNMYWJlbCk7XG5cbiAgc2VsZWN0aW9uXG4gICAgLnNlbGVjdEFsbCgnZy54LWF4aXMtbGFiZWwnKVxuICAgIC5kYXRhKFtudWxsXSlcbiAgICAuam9pbigndGV4dCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3gtYXhpcy1sYWJlbCcpXG4gICAgLmF0dHIoXG4gICAgICAneCcsXG4gICAgICAoeFNjYWxlLnJhbmdlKClbMF0gKyB4U2NhbGUucmFuZ2UoKVsxXSkgLyAyXG4gICAgKVxuICAgIC5hdHRyKFxuICAgICAgJ3knLFxuICAgICAgeVNjYWxlLnJhbmdlKClbMF0gKyB4QXhpc0xhYmVsT2Zmc2V0XG4gICAgKVxuICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgIC5hdHRyKCdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnaGFuZ2luZycpXG4gICAgLnRleHQoeEF4aXNMYWJlbCk7XG4gIC8vIGNvbnNvbGUubG9nKCd4U2NhbGUnLCB4U2NhbGUucmFuZ2UoKSk7XG4gIC8vIGNvbnNvbGUubG9nKCd5U2NhbGUnLCB5U2NhbGUucmFuZ2UoKSk7XG4gIHNlbGVjdGlvblxuICBcdC5zZWxlY3RBbGwoJ2cudGl0bGUnKVxuICAgIC5kYXRhKFtudWxsXSlcbiAgXHQuam9pbigndGV4dCcpXG4gIFx0LmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgLmF0dHIoXG4gICAgICAneCcsXG4gICAgICAoeFNjYWxlLnJhbmdlKClbMF0gKyB4U2NhbGUucmFuZ2UoKVsxXSkgLyAyXG4gICAgKVxuICAgIC5hdHRyKFxuICAgICAgJ3knLFxuICAgICAgeVNjYWxlLnJhbmdlKClbMV0gLSB0aXRsZU9mZnNldFxuICAgIClcbiAgXHQudGV4dCh0aXRsZUxhYmVsKVxufTtcbiIsImV4cG9ydCBjb25zdCBjb2xvckxlZ2VuZCA9IChcbiAgc2VsZWN0aW9uLFxuICB7XG4gICAgY29sb3JTY2FsZSxcbiAgICBjb2xvckxlZ2VuZExhYmVsLFxuICAgIGNvbG9yTGVnZW5kWCxcbiAgICBjb2xvckxlZ2VuZFksXG4gICAgdGlja1NwYWNpbmcgPSAyNSxcbiAgICB0aWNrUGFkZGluZyA9IDEyLFxuICAgIGNvbG9yTGVnZW5kTGFiZWxYID0gLTEwLFxuICAgIGNvbG9yTGVnZW5kTGFiZWxZID0gLTI0LFxuICB9XG4pID0+IHtcbiAgY29uc3QgY29sb3JMZWdlbmRHID0gc2VsZWN0aW9uXG4gICAgLnNlbGVjdEFsbCgnZy5jb2xvci1sZWdlbmQnKVxuICAgIC5kYXRhKFtudWxsXSlcbiAgICAuam9pbignZycpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2NvbG9yLWxlZ2VuZCcpXG4gICAgLmF0dHIoXG4gICAgICAndHJhbnNmb3JtJyxcbiAgICAgIGB0cmFuc2xhdGUoJHtjb2xvckxlZ2VuZFh9LCR7Y29sb3JMZWdlbmRZfSlgXG4gICAgKTtcblxuICBjb2xvckxlZ2VuZEdcbiAgICAuc2VsZWN0QWxsKCd0ZXh0LmNvbG9yLWxlZ2VuZC1sYWJlbCcpXG4gICAgLmRhdGEoW251bGxdKVxuICAgIC5qb2luKCd0ZXh0JylcbiAgICAuYXR0cigneCcsIGNvbG9yTGVnZW5kTGFiZWxYKVxuICAgIC5hdHRyKCd5JywgY29sb3JMZWdlbmRMYWJlbFkpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2NvbG9yLWxlZ2VuZC1sYWJlbCcpXG4gICAgLmF0dHIoJ2ZvbnQtZmFtaWx5JywgJ3NhbnMtc2VyaWYnKVxuICAgIC50ZXh0KGNvbG9yTGVnZW5kTGFiZWwpO1xuXG4gIGNvbG9yTGVnZW5kR1xuICAgIC5zZWxlY3RBbGwoJ2cudGljaycpXG4gICAgLmRhdGEoY29sb3JTY2FsZS5kb21haW4oKSlcbiAgICAuam9pbigoZW50ZXIpID0+XG4gICAgICBlbnRlclxuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpY2snKVxuICAgICAgICAuY2FsbCgoc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgICAgc2VsZWN0aW9uLmFwcGVuZCgnY2lyY2xlJyk7XG4gICAgICAgICAgc2VsZWN0aW9uLmFwcGVuZCgndGV4dCcpO1xuICAgICAgICB9KVxuICAgIClcbiAgICAuYXR0cihcbiAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgKGQsIGkpID0+IGB0cmFuc2xhdGUoMCwgJHtpICogdGlja1NwYWNpbmd9KWBcbiAgICApXG4gICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIDkpXG4gICAgLmF0dHIoJ2ZvbnQtZmFtaWx5JywgJ3NhbnMtc2VyaWYnKVxuICAgIC5jYWxsKChzZWxlY3Rpb24pID0+IHtcbiAgICAgIHNlbGVjdGlvblxuICAgICAgICAuc2VsZWN0KCdjaXJjbGUnKVxuICAgICAgICAuYXR0cigncicsIDEwKVxuICAgICAgICAuYXR0cignZmlsbCcsIGNvbG9yU2NhbGUpO1xuICAgICAgc2VsZWN0aW9uXG4gICAgICAgIC5zZWxlY3QoJ3RleHQnKVxuICAgICAgICAuYXR0cignZHknLCAnMC4zMmVtJylcbiAgICAgICAgLmF0dHIoJ3gnLCB0aWNrUGFkZGluZylcbiAgICAgICAgLnRleHQoKGQpID0+IGQpO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB7XG4gIGV4dGVudCxcbiAgc2NhbGVMaW5lYXIsXG4gIHNjYWxlVGltZSxcbiAgc2NhbGVPcmRpbmFsLFxuICBsaW5lLFxuICBzY2hlbWVDYXRlZ29yeTEwLFxuICBmbGF0R3JvdXAsXG4gIHNlbGVjdCxcbn0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgYXhlcyB9IGZyb20gJy4vYXhlcyc7XG5pbXBvcnQgeyBjb2xvckxlZ2VuZCB9IGZyb20gJy4vY29sb3JMZWdlbmQnO1xuXG5leHBvcnQgY29uc3QgbGluZUNoYXJ0ID0gKFxuICBzZWxlY3Rpb24sXG4gIHtcbiAgICBkYXRhLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4VmFsdWUsXG4gICAgeVZhbHVlLFxuICAgIG1hcmdpbixcbiAgICB4QXhpc0xhYmVsLFxuICAgIHlBeGlzTGFiZWwsXG4gICAgY29sb3JMZWdlbmRMYWJlbCxcbiAgICBjb2xvckxlZ2VuZFgsXG4gICAgY29sb3JMZWdlbmRZLFxuICAgIGV2ZW50LFxuICAgIGNvbG9yVmFsdWUgPSAoZCkgPT4ge1xuICAgICAgc3dpdGNoIChkLlVORFBfRGV2ZWxvcGluZ19SZWdpb25zKSB7XG4gICAgICAgIGNhc2UgJ1NTQSc6XG4gICAgICAgICAgcmV0dXJuICdTdWItU2FoYXJhbiBBcmZpY2EnO1xuICAgICAgICBjYXNlICdTQSc6XG4gICAgICAgICAgcmV0dXJuICdTb3V0aCBBc2lhJztcbiAgICAgICAgY2FzZSAnQVMnOlxuICAgICAgICAgIHJldHVybiAnQXJhYiBTdGF0ZXMnO1xuICAgICAgICBjYXNlICdFQ0EnOlxuICAgICAgICAgIHJldHVybiAnRXVyb3BlIC8gQ2VudHJhbCBBc2lhJztcbiAgICAgICAgY2FzZSAnRUFQJzpcbiAgICAgICAgICByZXR1cm4gJ0Vhc3QgQXNpYSAvIFBhY2lmaWMnO1xuICAgICAgICBjYXNlICdMQUMnOlxuICAgICAgICAgIHJldHVybiAnTGF0aW4gQW1lcmljYSAvIENhcmliYmVhbic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICdOL0EnO1xuICAgICAgfVxuICAgIH0sXG4gIH1cbikgPT4ge1xuICBjb25zdCBmaWx0ZXJlZERhdGEgPSBkYXRhLmZpbHRlcigoZCkgPT4ge1xuICAgIHJldHVybiAhaXNOYU4oeFZhbHVlKGQpKSAmJiAhaXNOYU4oeVZhbHVlKGQpKTtcbiAgfSk7XG5cbiAgY29uc3QgeFNjYWxlID0gc2NhbGVUaW1lKClcbiAgICAuZG9tYWluKGV4dGVudChmaWx0ZXJlZERhdGEsIHhWYWx1ZSkpXG4gICAgLnJhbmdlKFttYXJnaW4ubGVmdCwgd2lkdGggLSBtYXJnaW4ucmlnaHRdKTtcblxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbihleHRlbnQoZmlsdGVyZWREYXRhLCB5VmFsdWUpKVxuICAgIC5yYW5nZShbaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSwgbWFyZ2luLnRvcF0pO1xuXG4gIHNlbGVjdGlvbi5jYWxsKGF4ZXMsIHtcbiAgICB4U2NhbGUsXG4gICAgeVNjYWxlLFxuICAgIHhBeGlzTGFiZWwsXG4gICAgeUF4aXNMYWJlbCxcbiAgfSk7XG5cbiAgY29uc3QgbGluZUdlbmVyYXRvciA9IGxpbmUoKVxuICAgIC54KChkKSA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgICAueSgoZCkgPT4geVNjYWxlKHlWYWx1ZShkKSkpO1xuXG4gIGNvbnN0IGNvbG9yU2NhbGUgPSBzY2FsZU9yZGluYWwoKVxuICAgIC5kb21haW4oW1xuICAgICAgLi4ubmV3IFNldChcbiAgICAgICAgZmlsdGVyZWREYXRhLm1hcCgoZCkgPT4gY29sb3JWYWx1ZShkKSlcbiAgICAgICksXG4gICAgXSlcbiAgICAucmFuZ2Uoc2NoZW1lQ2F0ZWdvcnkxMCk7XG5cbiAgc2VsZWN0aW9uLmNhbGwoY29sb3JMZWdlbmQsIHtcbiAgICBjb2xvclNjYWxlLFxuICAgIGNvbG9yTGVnZW5kTGFiZWwsXG4gICAgY29sb3JMZWdlbmRYLFxuICAgIGNvbG9yTGVnZW5kWSxcbiAgfSk7XG5cbiAgY29uc3QgbGluZVZhbHVlID0gKGQpID0+IGQuQ291bnRyeTtcblxuICBjb25zdCBncm91cGVkID0gZmxhdEdyb3VwKFxuICAgIGZpbHRlcmVkRGF0YSxcbiAgICBsaW5lVmFsdWVcbiAgKTtcbiAgLy9jb25zb2xlLmxvZyhncm91cGVkKTtcbiAgY29uc3QgdG9vbHRpcCA9IGQzXG4gICAgLnNlbGVjdCgnYm9keScpXG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndG9vbHRpcCcpXG4gICAgLnN0eWxlKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXG4gICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcblxuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdwYXRoLmxpbmUnKVxuICAgIC5kYXRhKGdyb3VwZWQpXG4gICAgLmpvaW4oJ3BhdGgnKVxuICAgIC5hdHRyKCdjbGFzcycsICdsaW5lJylcbiAgICAuYXR0cignZCcsIChkKSA9PiBsaW5lR2VuZXJhdG9yKGRbMV0pKVxuICAgIC5hdHRyKCdzdHJva2UnLCAoZCkgPT5cbiAgICAgIGNvbG9yU2NhbGUoY29sb3JWYWx1ZShkWzFdWzBdKSlcbiAgICApXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDIpXG4gICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDAuNSlcblxuICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGV2ZW50LCBkKSB7XG4gICAgICBkMy5zZWxlY3QodGhpcykuYXR0cignc3Ryb2tlLXdpZHRoJywgMyk7XG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdkMy10b29sdGlwJylcbiAgICAgICAgLmF0dHIoJ3gnLCBldmVudC5wYWdlWCArIDEwKVxuICAgICAgICAuYXR0cigneScsIGV2ZW50LnBhZ2VZIC0gMTApXG4gICAgICAgIC50ZXh0KGRbMF0pO1xuICAgIH0pXG4gICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uIChldmVudCwgZCkge1xuICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDAuNSk7XG4gICAgICBzZWxlY3Rpb24uc2VsZWN0KCcuZDMtdG9vbHRpcCcpLnJlbW92ZSgpO1xuICAgIH0pO1xuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCcuZG90JylcbiAgICAuZGF0YShcbiAgICAgIGZpbHRlcmVkRGF0YS5maWx0ZXIoKGQpID0+IGQuRXZlbnQgIT09ICcnKVxuICAgIClcbiAgICAuam9pbignY2lyY2xlJylcbiAgICAuYXR0cignY2xhc3MnLCAnZG90JylcbiAgICAuYXR0cignY3gnLCAoZCkgPT4geFNjYWxlKHhWYWx1ZShkKSkpXG4gICAgLmF0dHIoJ2N5JywgKGQpID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICAgIC5hdHRyKCdyJywgMylcbiAgICAuYXR0cignZmlsbCcsIChkKSA9PlxuICAgICAgZC5ldmVudCAhPT0gJycgPyAnYmxhY2snIDogJ25vbmUnXG4gICAgKVxuICAgIC5hdHRyKCdkaXNwbGF5JywgKGQpID0+XG4gICAgICBkLmV2ZW50ICE9PSAnJyA/ICdibG9jaycgOiAnbm9uZSdcbiAgICApXG4gICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZXZlbnQsIGQpIHtcbiAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdyJywgNik7XG4gICAgICB0b29sdGlwXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpXG4gICAgICAgIC5odG1sKFxuICAgICAgICAgIGA8ZGl2PkNvdW50cnk6ICR7ZC5Db3VudHJ5fTwvZGl2PjxkaXY+WWVhcjogJHtkLkRhdGUuZ2V0RnVsbFllYXIoKX08L2Rpdj48ZGl2PkV2ZW50OiAke2QuRXZlbnR9PC9kaXY+YFxuICAgICAgICApXG4gICAgICAgIC5zdHlsZSgnbGVmdCcsIGV2ZW50LnBhZ2VYICsgMTAgKyAncHgnKVxuICAgICAgICAuc3R5bGUoJ3RvcCcsIGV2ZW50LnBhZ2VZIC0gMTAgKyAncHgnKTtcbiAgICB9KVxuICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigncicsIDMpO1xuICAgICAgdG9vbHRpcC5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBtZW51ID0gKFxuICBzZWxlY3Rpb24sXG4gIHsgb3B0aW9uc0RhdGEsIG9uQ2hhbmdlLCB2YWx1ZSB9XG4pID0+IHtcbiAgY29uc3Qgc2VsZWN0RWxlbWVudCA9IHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ3NlbGVjdCcpXG4gICAgLmRhdGEoW251bGxdKVxuICAgIC5qb2luKCdzZWxlY3QnKVxuICAgIC5vbignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICBvbkNoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuXG4gIHNlbGVjdEVsZW1lbnRcbiAgICAuc2VsZWN0QWxsKCdvcHRpb24nKVxuICAgIC5kYXRhKG9wdGlvbnNEYXRhKVxuICAgIC5qb2luKCdvcHRpb24nKVxuICAgIC5hdHRyKCd2YWx1ZScsIChkKSA9PiBkLnZhbHVlKVxuICAgIC50ZXh0KChkKSA9PiBkLmxhYmVsKTtcblxuICBzZWxlY3RFbGVtZW50LnByb3BlcnR5KCd2YWx1ZScsIHZhbHVlKTtcbn07IiwiaW1wb3J0IHsgY3N2UGFyc2UsIHNlbGVjdCwgdGltZVBhcnNlIH0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgbGluZUNoYXJ0IH0gZnJvbSAnLi9saW5lQ2hhcnQnO1xuaW1wb3J0IHsgbWVudSB9IGZyb20gJy4vbWVudSc7XG5cbmV4cG9ydCBjb25zdCB2aXogPSAoXG4gIGNvbnRhaW5lcixcbiAgeyBzdGF0ZSwgc2V0U3RhdGUgfVxuKSA9PiB7XG4gIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgY29uc3Qgb3B0aW9uc0RhdGEgPSBbXG4gICAgeyB2YWx1ZTogJ2hkaScsIGxhYmVsOiAnaGRpJyB9LFxuICAgIHsgdmFsdWU6ICdoZGlfbWFsZScsIGxhYmVsOiAnbWFsZScgfSxcbiAgICB7IHZhbHVlOiAnaGRpX2ZlbWFsZScsIGxhYmVsOiAnZmVtYWxlJyB9LFxuICBdO1xuXG4gIHNlbGVjdChjb250YWluZXIpLmNhbGwobWVudSwge1xuICAgIG9wdGlvbnNEYXRhLFxuICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICBvbkNoYW5nZTogKHZhbHVlKSA9PiB7XG4gICAgICBzZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pKTtcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIXN0YXRlLnZhbHVlKSB7XG4gICAgc2V0U3RhdGUoKHN0YXRlKSA9PiAoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgICB2YWx1ZTogJ2hkaScsXG4gICAgfSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN2ZyA9IHNlbGVjdChjb250YWluZXIpXG4gICAgLnNlbGVjdEFsbCgnc3ZnJylcbiAgICAuZGF0YShbbnVsbF0pXG4gICAgLmpvaW4oJ3N2ZycpXG4gICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgLy8gc3RhdGUuZGF0YSBjb3VsZCBiZTpcbiAgLy8gKiB1bmRlZmluZWRcbiAgLy8gKiAnTE9BRElORydcbiAgLy8gKiBBbiBhcnJheSBvZiBvYmplY3RzXG4gIGNvbnN0IHsgZGF0YSB9ID0gc3RhdGU7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YSAhPT0gJ0xPQURJTkcnKSB7XG4gICAgbGV0IHNlbGVjdGVkRGF0YXNldDtcbiAgICBzd2l0Y2ggKHN0YXRlLnZhbHVlKSB7XG4gICAgICBjYXNlICdoZGknOlxuICAgICAgICBzZWxlY3RlZERhdGFzZXQgPSBzdGF0ZS5oZGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaGRpX21hbGUnOlxuICAgICAgICBzZWxlY3RlZERhdGFzZXQgPSBzdGF0ZS5oZGlfbWFsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdoZGlfZmVtYWxlJzpcbiAgICAgICAgc2VsZWN0ZWREYXRhc2V0ID0gc3RhdGUuaGRpX2ZlbWFsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzZWxlY3RlZERhdGFzZXQgPSBzdGF0ZS5oZGk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBzdmcuY2FsbChsaW5lQ2hhcnQsIHtcbiAgICAgIGRhdGE6IHNlbGVjdGVkRGF0YXNldCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgeFZhbHVlOiAoc2VsZWN0ZWREYXRhc2V0KSA9PiBzZWxlY3RlZERhdGFzZXQuRGF0ZSxcbiAgICAgIHlWYWx1ZTogKHNlbGVjdGVkRGF0YXNldCkgPT4gc2VsZWN0ZWREYXRhc2V0LlZhbHVlLFxuICAgICAgbWFyZ2luOiB7XG4gICAgICAgIHRvcDogNzAsXG4gICAgICAgIGJvdHRvbTogNzAsXG4gICAgICAgIHJpZ2h0OiAxMjUsXG4gICAgICAgIGxlZnQ6IDY1LFxuICAgICAgfSxcbiAgICAgIHhBeGlzTGFiZWw6ICdZZWFyJyxcbiAgICAgIHlBeGlzTGFiZWw6ICdIREkgVmFsdWUnLFxuICAgICAgY29sb3JMZWdlbmRMYWJlbDogJ1VORFAgUmVnaW9uJyxcbiAgICAgIGNvbG9yTGVnZW5kWDogODQ1LFxuICAgICAgY29sb3JMZWdlbmRZOiA3MCxcbiAgICAgIGV2ZW50OiAoc2VsZWN0ZWREYXRhc2V0KSA9PiBzZWxlY3RlZERhdGFzZXQuRXZlbnRcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICBzZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIGRhdGE6ICdMT0FESU5HJyxcbiAgICB9KSk7XG4gICAgZmV0Y2goJ2RhdGEuY3N2JylcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgICAgLnRoZW4oKGNzdlN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gY3N2UGFyc2UoY3N2U3RyaW5nKTtcbiAgICAgICAgY29uc3QgcGFyc2VEYXRlID0gdGltZVBhcnNlKCclWScpO1xuICAgICAgICBsZXQgaGRpID0gW107XG4gICAgICAgIGxldCBoZGlfbWFsZSA9IFtdO1xuICAgICAgICBsZXQgaGRpX2ZlbWFsZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuICAgICAgICAgIC8vIGZlbWFsZSBzdWJzZXRcbiAgICAgICAgICBpZiAoZFsnRGF0ZSddLmluY2x1ZGVzKCdmZW1hbGUnKSkge1xuICAgICAgICAgICAgZFsnRGF0ZSddID0gcGFyc2VEYXRlKFxuICAgICAgICAgICAgICBkWydEYXRlJ10udG9TdHJpbmcoKS5zbGljZSgxMSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBoZGlfZmVtYWxlLnB1c2goZCk7XG4gICAgICAgICAgICAvLyBtYWxlIHN1YnNldFxuICAgICAgICAgIH0gZWxzZSBpZiAoZFsnRGF0ZSddLmluY2x1ZGVzKCdtYWxlJykpIHtcbiAgICAgICAgICAgIGRbJ0RhdGUnXSA9IHBhcnNlRGF0ZShcbiAgICAgICAgICAgICAgZFsnRGF0ZSddLnRvU3RyaW5nKCkuc2xpY2UoOSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBoZGlfbWFsZS5wdXNoKGQpO1xuICAgICAgICAgICAgLy8gbm9uLWdlbmRlcmVkIHN1YnNldFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkWydEYXRlJ10gPSBwYXJzZURhdGUoXG4gICAgICAgICAgICAgIGRbJ0RhdGUnXS50b1N0cmluZygpLnNsaWNlKDI0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGhkaS5wdXNoKGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNldFN0YXRlKChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGhkaSxcbiAgICAgICAgICBoZGlfbWFsZSxcbiAgICAgICAgICBoZGlfZmVtYWxlLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgfVxufTtcbiIsImltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHZpeiB9IGZyb20gJy4vdml6JztcbmNvbnN0IGNvbnRhaW5lciA9IHNlbGVjdCgnI2FwcCcpLm5vZGUoKTtcbmxldCBzdGF0ZSA9IHt9O1xuXG5jb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gIHZpeihjb250YWluZXIsIHtcbiAgICBzdGF0ZSxcbiAgICBzZXRTdGF0ZSxcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRTdGF0ZSA9IChuZXh0KSA9PiB7XG4gIHN0YXRlID0gbmV4dChzdGF0ZSk7XG4gIHJlbmRlcigpO1xufTtcblxucmVuZGVyKCk7XG4iXSwibmFtZXMiOlsiYXhpc0xlZnQiLCJheGlzQm90dG9tIiwic2NhbGVUaW1lIiwiZXh0ZW50Iiwic2NhbGVMaW5lYXIiLCJsaW5lIiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIsImZsYXRHcm91cCIsInNlbGVjdCIsImNzdlBhcnNlIiwidGltZVBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7RUFFTyxNQUFNLElBQUksR0FBRztFQUNwQixFQUFFLFNBQVM7RUFDWCxFQUFFO0VBQ0YsSUFBSSxNQUFNO0VBQ1YsSUFBSSxNQUFNO0VBQ1YsSUFBSSxVQUFVO0VBQ2QsSUFBSSxVQUFVO0VBQ2QsSUFBSSxVQUFVLEdBQUcsVUFBVSxHQUFHLE9BQU8sR0FBRyxVQUFVO0VBQ2xELElBQUksZ0JBQWdCLEdBQUcsRUFBRTtFQUN6QixJQUFJLGdCQUFnQixHQUFHLEVBQUU7RUFDekIsSUFBSSxXQUFXLEdBQUcsRUFBRTtFQUNwQixHQUFHO0VBQ0gsS0FBSztFQUNMLEVBQUUsU0FBUztFQUNYLEtBQUssU0FBUyxDQUFDLFVBQVUsQ0FBQztFQUMxQixLQUFLLElBQUksQ0FBQyxDQUFDLElBQUks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